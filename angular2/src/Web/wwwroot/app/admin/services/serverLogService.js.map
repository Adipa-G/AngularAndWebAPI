{"version":3,"sources":["../../src/app/admin/services/serverLogService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAca,gBAAgB;gBAIzB,0BAAiC,UAAsB,EAChC,SAAoB;oBACvC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC/B,CAAC;gBAEM,uCAAY,GAAnB;oBACI,MAAM,CAAC,IAAI,CAAC,UAAU;yBACjB,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,GAAG,gBAAgB,CAAC;yBAC1D,GAAG,CAAC,UAAC,GAAa,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;gBAC5C,CAAC;gBAAA,CAAC;gBAEK,qCAAU,GAAjB;oBACI,MAAM,CAAC,IAAI,CAAC,UAAU;yBACjB,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,GAAG,iBAAiB,CAAC;yBAC3D,GAAG,CAAC,UAAC,GAAa,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;gBAC5C,CAAC;gBAAA,CAAC;gBAEK,yCAAc,GAArB,UAAsB,MAAwB;oBAC1C,MAAM,CAAC,IAAI,CAAC,UAAU;yBACjB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,GAAG,qBAAqB,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;yBACxF,GAAG,CAAC,UAAC,GAAa,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;gBAC5C,CAAC;gBAAA,CAAC;gBAEK,qCAAU,GAAjB,UAAkB,MAAqB;oBACnC,MAAM,CAAC,IAAI,CAAC,UAAU;yBACjB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,GAAG,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;yBACpF,GAAG,CAAC,UAAC,GAAa,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;gBAC5C,CAAC;gBAAA,CAAC;gBACN,uBAAC;YAAD,CAjCA,AAiCC,IAAA;YAjCY,gBAAgB;gBAD5B,iBAAU,EAAE;gBAKK,WAAA,aAAM,CAAC,uBAAU,CAAC,CAAA;gBAC3B,WAAA,aAAM,CAAC,qBAAS,CAAC,CAAA;iDADuB,uBAAU;oBACrB,qBAAS;eALlC,gBAAgB,CAiC5B;;YAAA,CAAC;QAAA,CAAC","file":"serverLogService.js","sourcesContent":["import {Injectable, Inject} from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\n\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport {HttpLogFilter} from '../../domain/admin/HttpLogFilter';\r\nimport {LogMessageFilter} from '../../domain/admin/LogMessageFilter';\r\nimport {HttpLogInfo} from '../../domain/admin/HttpLogInfo';\r\n\r\nimport {HttpClient} from '../../common/services/HttpClient';\r\nimport {Constants} from '../../common/services/Constants';\r\n\r\n@Injectable()\r\nexport class ServerLogService {\r\n    private httpClient: HttpClient;\r\n    private constants: Constants;\r\n\r\n    constructor( @Inject(HttpClient) httpClient: HttpClient,\r\n        @Inject(Constants) constants: Constants) {\r\n        this.httpClient = httpClient;\r\n        this.constants = constants;\r\n    }\r\n\r\n    public getLogLevels() {\r\n        return this.httpClient\r\n            .get(this.constants.getServiceBaseUrl() + 'api/log/levels')\r\n            .map((res: Response) => res.json());\r\n    };\r\n\r\n    public getLoggers() {\r\n        return this.httpClient\r\n            .get(this.constants.getServiceBaseUrl() + 'api/log/loggers')\r\n            .map((res: Response) => res.json());\r\n    };\r\n\r\n    public getLogMessages(filter: LogMessageFilter) {\r\n        return this.httpClient\r\n            .post(this.constants.getServiceBaseUrl() + 'api/log/logMessages', JSON.stringify(filter))\r\n            .map((res: Response) => res.json());\r\n    };\r\n\r\n    public getLogHttp(filter: HttpLogFilter) {\r\n        return this.httpClient\r\n            .post(this.constants.getServiceBaseUrl() + 'api/log/logHttp', JSON.stringify(filter))\r\n            .map((res: Response) => res.json());\r\n    };\r\n};"],"sourceRoot":"/src"}