{"version":3,"sources":["../../src/app/admin/components/httpLogComponent.ts"],"names":[],"mappings":"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","file":"httpLogComponent.js","sourcesContent":["import {Component} from '@angular/core';\r\n\r\nimport {HttpLogFilter} from '../../domain/admin/HttpLogFilter';\r\nimport {HttpLogInfo} from '../../domain/admin/HttpLogInfo';\r\n\r\nimport {ErrorService} from '../../common/services/ErrorService';\r\nimport {UtilsService} from \"../../common/services/UtilsService\";\r\nimport {ServerLogService} from \"../services/ServerLogService\";\r\n\r\n@Component({\r\n    selector: 'http-logs',\r\n    templateUrl: './app/admin/components/httpLogComponent.html'\r\n})\r\n\r\nexport class HttpLogComponent {\r\n    private filter: HttpLogFilter;\r\n    private errorMessage: string;\r\n    private logLevels: string[];\r\n    private httpLogs: HttpLogInfo[];\r\n    private totalCount: number;\r\n\r\n    constructor(private errorService: ErrorService,\r\n        private serverLogService: ServerLogService,\r\n        private utilsService: UtilsService) {\r\n        this.errorService = errorService;\r\n        this.serverLogService = serverLogService;\r\n        this.utilsService = utilsService;\r\n        this.logLevels = [];\r\n        this.httpLogs = [];\r\n        this.totalCount = 0;\r\n\r\n        this.filter = this.initFilter();\r\n        this.initializeView();\r\n    }\r\n\r\n    private initializeView() {\r\n        this.serverLogService.getLogLevels().subscribe(\r\n            data => {\r\n                this.logLevels = data;\r\n            },\r\n            err => {\r\n                this.errorMessage = JSON.stringify(err);\r\n                this.errorService.handleHttpError(err);\r\n            });\r\n        this.updateView(this.filter);\r\n    }\r\n\r\n    private updateView(httpLogFilter: HttpLogFilter) {\r\n        this.filter = httpLogFilter;\r\n        this.filter.fromDate = this.utilsService.dateToUtcServerFormat(this.filter.fromDateLocal);\r\n        this.filter.toDate = this.utilsService.dateToUtcServerFormat(this.filter.toDateLocal);\r\n\r\n        this.serverLogService.getLogHttp(this.filter).subscribe(\r\n            data => {\r\n                this.httpLogs = data.results;\r\n                this.totalCount = data.totalCount;\r\n            },\r\n            err => {\r\n                this.errorMessage = JSON.stringify(err);\r\n                this.errorService.handleHttpError(err);\r\n            });\r\n    }\r\n\r\n    private initFilter(): HttpLogFilter {\r\n        var httpLogFilter: HttpLogFilter = new HttpLogFilter();\r\n        httpLogFilter.orderField = 'CalledOn';\r\n        httpLogFilter.orderDirection = 'Desc';\r\n        httpLogFilter.pageNumber = 1;\r\n        httpLogFilter.pageSize = 100;\r\n        httpLogFilter.logLevel = '';\r\n        httpLogFilter.trackId = '';\r\n        return httpLogFilter;\r\n    }\r\n\r\n    private toggleHeaders(log: HttpLogInfo) {\r\n        log.showHeaders = !log.showHeaders;\r\n    }\r\n}"],"sourceRoot":"/src"}